#!/usr/local/bin/perl
;#
;# cdif: word context diff
;#
;# Copyright (c) 1992 Kazumasa Utashiro <utashiro@sra.co.jp>
;# Software Research Associates, Inc., Japan
;#
;; $rcsid = '$Id: cdif,v 1.4 1992/03/23 18:40:53 utashiro Exp $';
;#
;; ($myname = $0) =~ s,.*/,,;
;; $usage = <<_;
Usage: $myname [-B] [-c] [-v] [-n] [-A #] [-C #] [-D #] [-b] [-w] file1 file2
       $myname [-rcs] [-q] [-rrev1 [-rrev2]] [$myname options] file
       $myname [$myname options] [diff-output-file]
Options:
	-B	byte compare
	-c	diff -c
	-v	use video standout (default for tty)
	-n	use nroff style overstrike (default for non-tty)
	-b	ignore trailing blank
	-w	ignore whitespace
	-A, -C, -D (Append, Change, Delete) takes one of
		vso: video standout
		vul: video underline
		vbd: video bold
		bd:  nroff style overstrike
		ul:  nroff style underline
		or any sequence or sequences separated by comma
_

$opts = 'cbdvqnt:BA:C:D:'.'ibw';
while ($_ = $ARGV[0], /^-.+/ && shift) {
    next unless ($car, $cdr) = /^-?(.)(.*)/;
    if (/-rcs$/) { $rcs++; next; }
    if ($car eq 'h') { &usage; }
    if ($car eq 'r') {
	&usage("$_: Too many revisions\n\n") if @rcs == 2;
	$rcs++; push(@rcs, $_); next;
    }
    if (index($opts, "$car:") >= $[) {
	eval "\$opt_$car = length(\$cdr) ? \$cdr : \@ARGV ? shift : &usage";
	next;
    }
    if (index($opts, $car) >= $[) {
	eval "\$opt_$car++"; $_ = $cdr; redo;
    }
    &usage("Unknown option: $car\n");
}
grep(eval "push(\@sub_diffopt, '-$_') if \$opt_$_;", 'i', 'w');
@diffopt = @sub_diffopt;
grep(eval "push(\@diffopt, '-$_') if \$opt_$_;", 'c', 'b');

sub usage {
    select(STDERR);
    print @_, $usage;
    print "$rcsid\n" if $rcsid =~ /:/;
    exit;
}

if ($rcs) {
    push(@rcsopt, '-q') if $opt_q;
    $rcsfile = shift || &usage("No RCS filename\n\n");
    $DIFF = "rcsdiff @diffopt @rcsopt @rcs $dopts $rcsfile|";
} elsif (@ARGV == 2) {
    ($OLD, $NEW) = splice(@ARGV, 0, 2);
    $DIFF = "diff @diffopt $OLD $NEW |";
} elsif (@ARGV < 2) {
    $DIFF = shift || '-';
} else {
    &usage("Arguments error.\n\n") if @ARGV;
}
print "DIFF=\"$DIFF\"\n" if $opt_d;

%func = ('bd', *bd, 'ul', *ul, 'vso', *vso, 'vul', *vul, 'vbd', *vbd);
($A, $C, $D) = (!$opt_n && ($opt_v || -t STDOUT))
    ? ('vso', 'vbd', 'vso') : ('bd', 'bd', 'bd');
for ('A', 'C', 'D') {
    eval "\$opt = \$opt_$_ || \$$_";
    if ($func{$opt}) {
	eval "*$_ = \$func{$opt}";
	&termcap if ($opt =~ /^v/) && !%TC;
    } else {
	$S = $S ? ++$S : 'S001';
	($start, $end) = $opt =~ /,/ ? split(/,/, $opt) : ($opt, $opt);
	$start =~ s/\W/\\$&/g; $end =~ s/\W/\\$&/g;
	eval "sub $S {join('', \"$start\", \@_, \"$end\");} *$_ = *$S;\n";
    }
}	

if ($opt_B) {
    $pat = '[\200-\377]?[\000-\377]';
} else {
    $pat = '[\200-\377].|\w+|\s*\n|\s+|[\000-\377]';
}
@ul[1,2] = ("_\010", "__\010\010");
@bs[1,2] = ("\010", "\010\010");
$tmp = $opt_t || '/tmp';
$T1 = "$tmp/cdif_" . ($opt_d >= 2 ? $< : $$) . '_1';
$T2 = "$tmp/cdif_" . ($opt_d >= 2 ? $< : $$) . '_2';

@SIG{'INT', 'HUP', 'QUIT', 'TERM'} = ('cleanup') x 4;

open(DIFF) || die "diff: $!\n";
while (<DIFF>) {
    print;
    if ($diff_c = (($left) = /^\*\*\* ([\d,]+) \*\*\*\*$/)) {
	@old = &read_diffc(DIFF, scalar(&range($left)));
	print(@old), next if @old < 2;
	$new = $_ = <DIFF>; @new = ();
	if (($right) = /^--- ([\d,]+) ----$/) {
	    @new = &read_diffc(DIFF, scalar(&range($right)));
	    for ($i = $[ + 1; $i <= $#old; $i += 2) {
		($old[$i], $new[$i]) = &context($old[$i], $new[$i]);
	    }
	}
	print @old, $new, @new;
    }
    elsif (($left, $right) = /^([\d,]+)c([\d,]+)$/) {
	$old = &read(DIFF, scalar(&range($left)));
	$del = &read(DIFF, 1);
	$new = &read(DIFF, scalar(&range($right)));
	($old, $new) = &context($old, $new);
	print $old, $del, $new;
    }
}
close(DIFF);
exit($? >> 8);

######################################################################

sub context {
    local($old, $new, $_) = @_;
    local(@control);
    @c{'a', 'd', 'c'} = (0, 0, 0);
    @owlist = &maketmp($T1, $old);
    @nwlist = &maketmp($T2, $new);
    open(CDIF, "diff @sub_diffopt $T1 $T2 |") || die "diff: $!\n";
    /[\d,]+([adc])[\d,]+/ && push(@control, $_) && $c{$1}++ while (<CDIF>);
    close(CDIF);
    if ($opt_d >= 1) {
	printf "old=%d new=%d control=%d\n", @owlist+0, @nwlist+0, @control+0;
	printf "append=$c{'a'} delete=$c{'d'} change=$c{'c'}\n";
    }
    &makebuf;
    &cleanup() if $opt_d < 2;
    die "$myname: illegal status of subprocess\n" if ($?>>8) > 1;
    return ($obuf, $nbuf);
}

sub cleanup {
    unlink($T1), unlink($T2) if $opt_d < 2;
    print("Signal @_\n"), exit 2 if @_;
}

sub maketmp {
    local($tmp, $_, @words) = @_;
    local(@notspace) = (0);
    open (TMP, ">$tmp") || warn "$tmp: $!\n", return 0;
    s/^[!<>] //g;
    foreach (/$pat/go) {
	if ($opt_w) {
	    push(@notspace, !/\s/);
	    if (shift(@notspace) && $notspace[0]) {
		push(@words, '');
		print TMP "\n";
	    }
	}
	if (s/(\s*)\n/\n/ && (length($1) || $opt_b || $opt_w)) {
	    print TMP ($opt_b || $opt_w) ? "\n" : "$1\n";
	    push(@words, $1);
	}
	push(@words, $_);
	print TMP $_;
	print TMP "\n" unless /\n$/;
    }
    close(TMP);
    @words;
}

sub makebuf {
    local($_, $old, $ctrl, $new, $o1, $o2, $n1, $n2);
    local($o, $n) = ($[, $[);
    $obuf = $nbuf = '';
    for (@control) {
	($old, $ctrl, $new) = /([\d,]+)([adc])([\d,]+)/;
	($o1, $o2) = &range($old); $o1--; $o2--;
	($n1, $n2) = &range($new); $n1--; $n2--;
	$obuf .= join('', @owlist[$o .. $o1 - 1]), $o = $o1 if $o < $o1;
	$nbuf .= join('', @nwlist[$n .. $n1 - 1]), $n = $n1 if $n < $n1;
	if ($ctrl eq 'd') {
	    $obuf .= &D(@owlist[$o1 .. $o2]);
	    $o = $o2 + 1;
	}
	if ($ctrl eq 'c') {
	    $obuf .= &C(@owlist[$o1 .. $o2]);
	    $nbuf .= &C(@nwlist[$n1 .. $n2]);
	    $o = $o2 + 1;
	    $n = $n2 + 1;
	}
	if ($ctrl eq 'a') {
	    $nbuf .= &A(@nwlist[$n1 .. $n2]);
	    $n = $n2 + 1;
	}
    }
    $obuf .= join('', @owlist[$o .. $#owlist]);
    $nbuf .= join('', @nwlist[$n .. $#nwlist]);
    if ($diff_c) {
	$obuf =~ s/^/! /g; $nbuf =~ s/^/! /g;
    } else {
	$obuf =~ s/^/< /g; $nbuf =~ s/^/> /g;
    }
}

sub read_diffc {
    local($FH, $n, @buf, $buf, $bang, $_) = @_;
    while ($n-- && ($_ = <DIFF>)) {
	push(@buf, $buf), $buf = '', $bang ^= 1 if /^!/ ^ $bang;
	$buf .= $_;
    }
    push(@buf, $buf) if $buf;
    @buf;
}

sub vso { join('', $so, @_, $se); }
sub vul { join('', $us, @_, $ue); }
sub vbd { join('', $md, @_, $me); }
sub ul { join('', grep(s/[\200-\377]?./$ul[length($&)].$&/ge || 1, @_)); }
sub bd { join('', grep(s/[\200-\377]?./$&.$bs[length($&)].$&/ge || 1, @_)); }

sub range {
    local($_, $from, $to) = @_;
    ($from, $to) = /,/ ? split(/,/) : ($_, $_);
    wantarray ? ($from, $to) : $to - $from + 1;
}

sub read {
    local($FH, $c, @buf) = (@_, '');
    push(@buf, scalar(<$FH>)) while $c--;
    wantarray ? @buf : join('', @buf);
}

sub termcap {
    do 'ioctl.ph' || do 'sys/ioctl.ph';
    require('termcap.pl'); $ospeed = 1 unless $ospeed;
    &Tgetent;
    $so = &Tputs($TC{'so'}); $se = &Tputs($TC{'se'});
    $us = &Tputs($TC{'us'}); $ue = &Tputs($TC{'ue'});
    $md = &Tputs($TC{'md'}) || $so; $me = &Tputs($TC{'me'}) || $se;
}
