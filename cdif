#!/usr/local/bin/perl
;#
;# cdif: context diff
;#
;# Copyright (c) 1992 Kazumasa Utashiro <utashiro@sra.co.jp>
;#
;; $rcsid = '$Id: cdif,v 1.3 1992/03/13 09:53:40 utashiro Exp $';
;#
;; ($myname = $0) =~ s,.*/,,;
;; $usage = <<_;
Usage: $myname [-c] [-b] [-v] [-n] [-A #] [-C #] [-D #] file1 file2
       $myname [-rcs] [-q] [-rrev1 [-rrev2]] [$myname options] file
       $myname [$myname opts] diff-output-file
       diff file1 file2 | $myname
Options:
	-c	diff -c
	-b	byte compare
	-v	use video standout (default for tty)
	-n	use nroff style overstrike (default for no-tty)
	-A, -C, -D (Append, Change, Delete) takes
		"vso": video standout		"vul": video underline
		"bd":  nroff style overstrike	"ul":  nroff style underline
		or any sequence or sequences separated by comma
_

$opts = 'cbdvqnt:A:C:D:';
while ($_ = $ARGV[0], /^-.+/ && shift) {
    next unless ($car, $cdr) = /^-?(.)(.*)/;
    if (/-rcs$/) { $rcs++; next; }
    if ($car eq 'h') { &usage; }
    if ($car eq 'r') {
	&usage("$_: Too many revisions\n\n") if @rcs == 2;
	$rcs++; push(@rcs, $_); next;
    }
    if (index($opts, "$car:") >= $[) {
	eval "\$opt_$car = length(\$cdr) ? \$cdr : \@ARGV ? shift : &usage";
	next;
    }
    if (index($opts, $car) >= $[) {
	eval "\$opt_$car++"; $_ = $cdr; redo;
    }
    &usage("Unknown option: $car\n");
}

sub usage {
    select(STDERR);
    print @_, $usage;
    print "$rcsid\n" if $rcsid =~ /:/;
    exit;
}

push(@diffopt, '-c') if $opt_c;

if ($rcs) {
    push(@rcsopt, '-q') if $opt_q;
    $rcsfile = shift || &usage("No RCS filename\n\n");
    $DIFF = "rcsdiff @diffopt @rcsopt @rcs $dopts $rcsfile|";
} elsif (@ARGV == 2) {
    ($OLD, $NEW) = splice(@ARGV, 0, 2);
    $DIFF = "diff @diffopt $OLD $NEW |";
} elsif (@ARGV < 2) {
    $DIFF = shift || '-';
} else {
    &usage("Arguments error.\n\n") if @ARGV;
}

$tmp = $opt_t || '/tmp';
$T1 = "$tmp/cdif_" . ($opt_d >= 2 ? $< : $$) . "_1";
$T2 = "$tmp/cdif_" . ($opt_d >= 2 ? $< : $$) . "_2";

@bs[1,2] = ("\010", "\010\010");
@ul[1,2] = ("_\010", "__\010\010");

%func = ('bd', *bd, 'ul', *ul, 'vso', *vso, 'vul', *vul, 'vbd', *vbd);
($A, $C, $D) = (!$opt_n && ($opt_v || -t STDOUT))
    ? ('vso', 'vbd', 'vso') : ('bd', 'bd', 'bd');
for ('A', 'C', 'D') {
    eval "\$opt = \$opt_$_ || \$$_";
    if ($func{$opt}) {
	eval "*$_ = \$func{$opt}";
	&termcap if ($opt =~ /^v/) && !%TC;
    } else {
	$S = $S ? ++$S : 'S001';
	($start, $end) = $opt =~ /,/ ? split(/,/, $opt) : ($opt, $opt);
	$start =~ s/\W/\\$&/g; $end =~ s/\W/\\$&/g;
	eval "sub $S {join('', \"$start\", \@_, \"$end\");} *$_ = *$S;\n";
    }
}	

open(DIFF) || die "diff: $!\n";
while (<DIFF>) {
    print;
    $diff_c = 0;
    if ($diff_c = ($_ eq "***************\n")) {
	@old = ($_ = <DIFF>);
	($left) = /^\*\*\* ([\d,]+) \*\*\*\*/;
	($l1, $l2) = &range($left);
	push(@old, &read_diffc(DIFF, $n = $l2 - $l1 + 1));
	print(@old), next if @old <= 2;
	@new = ($_ = <DIFF>);
	($right) = /^--- ([\d,]+) ----/;
	($r1, $r2) = &range($right);
	push(@new, &read_diffc(DIFF, $n = $r2 - $r1 + 1));
	for ($i = $[ + 2; $i <= $#old; $i += 2) {
	    &context($old[$i], $new[$i]);
	    $old[$i] = $obuf;
	    $new[$i] = $nbuf;
	}
	print @old, @new;
    } elsif (($left, $ctrl, $right) = /^([\d,]+)([adc])([\d,]+)/) {
	($l1, $l2) = &range($left);
	($r1, $r2) = &range($right);
	$old = $new = '';
	if ($ctrl eq 'd' || $ctrl eq 'c') {
	    $old = &read(DIFF, $n = $l2 - $l1 + 1);
	}
	$separator = ($ctrl eq 'c') ? &read(DIFF, 1) : '';
	if ($ctrl eq 'a' || $ctrl eq 'c') {
	    $new = &read(DIFF, $n = $r2 - $r1 + 1);
	}
	if ($ctrl eq 'c' && &context($old, $new)) {
	    print $obuf, $separator, $nbuf;
	} else {
	    print $old, $separator, $new;
	}
    }
}
close(DIFF);
exit($? >> 8);

######################################################################

sub context {
    local($old, $new, $_) = @_;
    local(@control);
    @c{'a', 'd', 'c'} = (0, 0, 0);
    @owlist = &maketmp($T1, $old);
    @nwlist = &maketmp($T2, $new);
    open(CDIF, "diff $T1 $T2 |") || die "diff: $!\n";
    /[\d,]+([adc])[\d,]+/ && push(@control, $_) && $c{$1}++ while (<CDIF>);
    close(CDIF);
    if ($opt_d >= 1) {
	printf "old=%d new=%d control=%d\n", @owlist+0, @nwlist+0, @control+0;
	printf "append=$c{'a'} delete=$c{'d'} change=$c{'c'}\n";
    }
    &makebuf;
    unlink($T1), unlink($T2) if $opt_d < 2;
    die "$myname: illegal status of subprocess\n" if ($?>>8) > 1;
    return 1;
}

sub maketmp {
    local($tmp, @list, @wlist) = @_;
    open (TMP, ">$tmp") || warn "$F: $!\n", return 0;
    foreach (@list) {
	s/^[!<>] //g;
	if ($opt_b) {
	    @words = /[\200-\377]?[\000-\377]/g;
	} else {
	    @words = /[\200-\377].|\w+|[\000-\377]/g;
	}
	push(@wlist, @words);
	foreach (@words) {
	    s/\n/\r/;
	    print TMP $_, "\n";
	}
    }
    close(TMP);
    @wlist;
}

sub makebuf {
    local($_, $old, $ctrl, $new, $o1, $o2, $n1, $n2);
    local($o, $n) = ($[, $[);
    $obuf = $nbuf = '';
    for (@control) {
	($old, $ctrl, $new) = /([\d,]+)([adc])([\d,]+)/;
	($o1, $o2) = &range($old); $o1--; $o2--;
	($n1, $n2) = &range($new); $n1--; $n2--;
	$obuf .= join('', @owlist[$o .. $o1 - 1]), $o = $o1 if $o < $o1;
	$nbuf .= join('', @nwlist[$n .. $n1 - 1]), $n = $n1 if $n < $n1;
	if ($ctrl eq 'd') {
	    $obuf .= &D(@owlist[$o1 .. $o2]);
	    $o = $o2 + 1;
	}
	if ($ctrl eq 'c') {
	    $obuf .= &C(@owlist[$o1 .. $o2]);
	    $nbuf .= &C(@nwlist[$n1 .. $n2]);
	    $o = $o2 + 1;
	    $n = $n2 + 1;
	}
	if ($ctrl eq 'a') {
	    $nbuf .= &A(@nwlist[$n1 .. $n2]);
	    $n = $n2 + 1;
	}
    }
    $obuf .= join('', @owlist[$o .. $#owlist]);
    $nbuf .= join('', @nwlist[$n .. $#nwlist]);
    if ($diff_c) {
	$obuf =~ s/^/! /g; $nbuf =~ s/^/! /g;
    } else {
	$obuf =~ s/^/< /g; $nbuf =~ s/^/> /g;
    }
    return 1;
}

sub read_diffc {
    local($FH, $n, $buf, $bang, @buf, $_) = @_;
    while ($n-- && ($_ = <DIFF>)) {
	push(@buf, $buf), $buf = '', $bang ^= 1 if /^!/ ^ $bang;
	$buf .= $_;
    }
    push(@buf, $buf) if $buf;
    @buf;
}

sub vso { join('', $so, @_, $se); }
sub vul { join('', $us, @_, $ue); }
sub vbd { join('', $md, @_, $me); }

sub bd {
    local($_) = join('', @_);
    s/[\200-\377]?./$&.$bs[length($&)].$&/ge;
    $_;
}

sub ul {
    local($_) = join('', @_);
    s/[\200-\377]?./$ul[length($&)].$&/eg;
    $_;
}

sub range {
    local($_) = @_;
    /,/ ? split(/,/) : ($_, $_);
}

sub read {
    local($fh, $c, $buf) = (@_, '');
    $buf .= <$fh> while $c--;
    $buf;
}

sub skip {
    local($fh, $c) = @_;
    scalar(<$fh>) while ($c--);
}

sub termcap {
    do 'ioctl.ph' || do 'sys/ioctl.ph';
    require('termcap.pl'); $ospeed = 1 unless $ospeed;
    &Tgetent;
    $so = &Tputs($TC{'so'}); $se = &Tputs($TC{'se'});
    $us = &Tputs($TC{'us'}); $ue = &Tputs($TC{'ue'});
    $md = &Tputs($TC{'md'}) || $so; $me = &Tputs($TC{'me'}) || $se;
}
