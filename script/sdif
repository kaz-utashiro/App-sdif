#!/usr/local/bin/perl
;#
;# sdif: sdiff clone
;#
;# Copyright (c) 1992 Kazumasa Utashiro <utashiro@sra.co.jp>
;# Software Research Associates, Inc., Japan
;#
;# Original version on Jul 24 1991
;; $rcsid = '$Id: sdif,v 1.9 1992/03/23 20:13:59 utashiro Exp $';
;#
;# Incompatibility:
;#	- has -n option for numbering
;#	- has -f option for folding
;#	- handle backspace and caridge return
;#	- no -o option
;#	- all tabs are expanded
;#	- default width is 80
;#	- rcs support
;#	- cdif support
;#
;($myname = $0) =~ s,.*/,,;
;$usage = <<_;
Usage: $myname [-n] [-l] [-s] [-f] [-b] [-i] [-w] [-w #] [-c] file1 file2
       $myname [-rcs] [-q] [-rrev1 [-rrev2]] [$myname options] file
Options:
	-n	print line number
	-l	print left column only for identical line
	-s	don't print identical line
	-f	fold line instead of truncating
		(folded line is marked by '+' character)
	-b	ignore trailing blanks
	-i	ignore the case of letters
	-w	ignore all blanks
	-w #	specify width of output (default is 80)
	-c	use "cdif"
	-rcs	compare rcs files
		(not required when revision number is supplied)
	-rrev	RCS revision number
	-q	don't print rcs diagnostics
_
$opts = 'nlsfbiwhqdxc';
while ($_ = $ARGV[0], /^-/ && shift) {
    next unless ($car, $cdr) = /^-?(.)(.*)/;
    if (/-rcs$/) { $rcs++; next; }
    if ($car eq 'r') {
	&usage("$_: Too many revisions\n") if (@rcs == 2);
	$rcs++; push(@rcs, $_); next;
    }
    if ($car eq 'w') {
	if ($cdr =~ /^\d+$/) { $width = $cdr; next; }
	if ($ARGV[$[] =~ /^\d+$/) { $width = shift; next; }
    }
    if (index($opts, "$car:") >= $[) {
	eval "\$opt_$car = length(\$cdr) ? \$cdr : \@ARGV ? shift : &usage";
	next;
    }
    if (index($opts, $car) >= $[) {
	eval "\$opt_$car++"; $_ = $cdr; redo;
    }
    &usage("Unknown option: $car\n\n");
}

$opt_h && &usage;
push(@rcsopts, '-q') if $opt_q;
if ($rcs) {
    $rcsfile = shift || &usage("No RCS filename\n\n");
    $ofile = "co @rcsopts -p " . $rcs[0] . " $rcsfile|";
    if (@rcs > 1) {
	$nfile = "co @rcsopts -p " . $rcs[1] . " $rcsfile|";
    } else {
	$nfile = $rcsfile;
    }
} else {
    &usage("Two filenames are required.\n\n") if (@ARGV != 2);
    ($ofile, $nfile) = splice(@ARGV, 0, 2);
}

sub usage {
    select(STDERR);
    print @_, $usage;
    print "$rcsid\n" if $rcsid =~ /:/;
    exit;
}

$width = 80 unless defined($width);
$width = int(($width - 5) / 2);
grep(eval "\$diffopts .= '-$_ ' if \$opt_$_", 'b', 'i', 'w');

if ($opt_c) {
    $diffcmd  = "cdif $diffopts";
    if ($rcs) {
	$diffcmd .= " -rcs @rcsopts @rcs $rcsfile |";
    } else {
	$diffcmd .= " $ofile $nfile |";
    }
} elsif ($rcs) {
    $diffcmd = "rcsdiff @rcsopts @rcs $diffopts $rcsfile|";
} else {
    $diffcmd = "diff $diffopts $ofile $nfile |";
}
if ($opt_d) {
    print STDERR "\$ofile = $ofile\n";
    print STDERR "\$nfile = $nfile\n";
    print STDERR "\$diffcmd = $diffcmd\n";
}

open(OLD, $ofile) || die "$ofile: $!\n";
open(NEW, $nfile) || die "$nfile: $!\n";
open(DIFF, $diffcmd) || die "cannot open diff: $!";

$nformat = '%-4d %s';
for (0..7) { $tab[$_] = ' ' x (8 - $_); }

while (<DIFF>) {
    if (($left, $ctrl, $right) = /([\d,]+)([adc])([\d,]+)/) {
	($l1, $l2) = &range($left);
	($r1, $r2) = &range($right);
	$identical_line = $l1 - $oline;
	$identical_line-- if ($ctrl ne 'a');
	&print_identical($identical_line);
	@old = @new = ();
	print if ($opt_d || $opt_s);
	if ($ctrl eq 'd' || $ctrl eq 'c') {
	    @old = &read(DIFF, $n = $l2 - $l1 + 1);
	    &read(OLD, $n);
	    foreach (@old) { s/^< //; }
	}
	&read(DIFF, 1) if ($ctrl eq 'c');
	if ($ctrl eq 'a' || $ctrl eq 'c') {
	    @new = &read(DIFF, $n = $r2 - $r1 + 1);
	    foreach (@new) { s/^> //; }
	    &read(NEW, $n);
	}
	&flush;
    } else {
	warn "Unrecognizable line -- $_";
    }
}
&print_identical(-1) unless $opt_s;
close(OLD); close(NEW);
close(DIFF);
exit (($? >> 8) == 2);

sub flush {
    while(@new || @old) {
	undef($old); undef($new);
	$mark = !@new ? '<' : @old ? '|' : '>';
	$new = shift(@new), ++$nline if (@new);
	$old = shift(@old), ++$oline if (@old);
	&out($old, $mark, $new);
    }
}

sub print_identical {
    local($n, $old, $new) = @_;
    while ($n--) {
	$old = <OLD>; $new = <NEW>;
	last if (!defined($old) && !defined($new));
	$oline++; $nline++;
	next if $opt_s;
	if ($opt_l) {
	    $old = &num($oline, &expand($old)) if $opt_n;
	    print $old;
	} else {
	    &out($old, ' ', $new);
	}
    }
}

sub read {
    local($fh, $c, @buf) = @_;
    push(@buf, scalar(<$fh>)) while ($c--);
    @buf;
}

sub out {
    local($old, $mark, $new) = @_;
    local($o, $n);
    local($ocont, $ncont, $contmark) = (' ', ' ', '+');
    if (defined($old)) {
	chop($old = &expand($old));
	$old = &num($oline, $old) if $opt_n;
    }
    if (defined($new)) {
	chop($new = &expand($new));
	$new = &num($nline, $new) if $opt_n;
    }
    while (1) {
	($o, $old) = &fold($old, $width, 1);
	($n, $new) = &fold($new, $width);
	print $o, ' ', $ocont, $mark, $ncont, ' ', $n, "\n";
	last if !$opt_f || ($old eq '' && $new eq '');
	if ($opt_n) {
	    $old = ' ' x 5 . $old if length($old);
	    $new = ' ' x 5 . $new if length($new);
	} else {
	    $ocont = length($old) ? $contmark : ' ';
	    $ncont = length($new) ? $contmark : ' ';
	}
    }
}

sub fold {
    local($_, $width, $pad) = @_;
    local($l, $room) = ('', $width);
    local($n, $c, $r);
    while (length) {
	if (s/^\010//) {
	    ($room < $width) && $room++; $c = $&; next;
	} elsif (s/^\r//) {
	    $c = "\010" x ($width - $room - $opt_n * 5);
	    $room = $width - $opt_n * 5;
	    next;
	}
	last if !$room || (/^[200-\377]/ && $room < 2);
	if (($mb = s/^([\200-\377].)+//) || s/[^\b\r\200-\377]+//) {
	    $n = $room; $n -= $room % 2 if $mb;
	    ($c, $r) = unpack("a$n a*", $&);
	    $room -= length($c);
	    $_ = $r . $_;
	} else {
	    die "$myname: panic";
	}
    } continue {
	$l .= $c;
    }
    $l .= ' ' x $room if $pad;
    ($l, $_);
}

sub range {
    local($_) = @_;
    /,/ ? split(/,/) : ($_, $_);
}

sub num {
    local($num, $_) = @_;
    sprintf($nformat, $num, $_);
}

sub expand {
    local($_, $t) = @_;
    if (($test || (($test = '10') =~ s/0/$`/, $test)) eq '11') {
	1 while s/\t/$tab[&pwidth($`) % 8]/e;
    } else {
	substr($_, $t, 1) = $tab[$t % 8] while(($t = index($_, "\t")) >= $[);
    }
    $_;
}

sub pwidth {
    return(length($_[0])) unless($_[0]=~/[\033\010\f\r]/);
    local($_)=shift;
    s/^.*[\f\r]//;
    s/\033\$[\@B]|\033\([JB]//g;
    1 while s/[^\010]\010//;
    s/^\010+//;
    length($_);
}

sub max { $_[ ($_[$[] < $_[$[+1]) + $[]; }
sub min { $_[ !($_[$[] < $_[$[+1]) + $[]; }
