#!/usr/bin/perl -CSDA

require 5.010;
use strict;
use warnings;
use utf8;
use List::Util qw(min max);
use Carp;
use Getopt::Long;
use Pod::Usage;
use Term::ANSIColor qw(:constants);
use Data::Dumper;
$Data::Dumper::Terse = 1;

##
## sdif: sdiff clone
##
## Copyright (c) 1992-2014 Kazumasa Utashiro
##
## Original version on Jul 24 1991
;; my $rcsid = q$Id: sdif,v 2.2 2014/01/19 14:50:28 utashiro Exp $;
##
## Use and redistribution for ANY PURPOSE are granted as long as all
## copyright notices are retained.  Redistribution with modification
## is allowed provided that you make your modified version obviously
## distinguishable from the original one.  THIS SOFTWARE IS PROVIDED
## BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES ARE
## DISCLAIMED.
##

=pod

=head1 NAME

sdif - sdiff clone

=head1 SYNOPSIS

sdif
[-n] [-l] [-s] [-[fF]] [-b] [-i] [-w] [-w width] [-c[line]]
[-diff=command] [file1 [file2]]

	-n	print line number
	-l	print left column only for identical line
	-s	don't print identical line
	-f	fold line instead of truncating
		(folded line is marked by '.' character)
	-F	fold line by word boundaries
	-c[#]	do context diff
	-w #	specify width of output (default is 80)
	--cdif	use "cdif"
	-1	print old file only
	-2	print new file only

=cut

my $opt_n;
my $opt_l;
my $opt_s;
my $opt_f;
my $opt_q;
my $opt_d;
my $opt_F;
my $opt_1;
my $opt_2;
my $opt_c;
my $opt_b;
my $opt_i;
my $opt_u;
my $opt_cdif;
my $opt_env;
my @opt_colormap;
my @diffopts;
my $diff;
my $readfile;
my $screen_width;
my $column_width;

my $opt_color;
my $opt_w;
my $opt_t;

##
## Special treatment --noenv option.
##
if (grep { $_ eq '--noenv' } @ARGV) {
    $opt_env = 0;
}
if ($ENV{'SDIFOPTS'}) {
    require('shellwords.pl');
    unshift(@ARGV, &shellwords($ENV{'SDIFOPTS'}));
}

my @optargs = (
    "n|number!" => \$opt_n,
    "l" => \$opt_l,
    "s" => \$opt_s,
    "f" => \$opt_f,
    "F" => \$opt_F,
    "1" => \$opt_1,
    "2" => \$opt_2,
    "b" => \$opt_b,
    "i" => \$opt_i,
    "w=i" => \$opt_w,

    "d+" => \$opt_d,
    "h|help" => sub { usage() },
    "man" => sub { pod2usage({-verbose => 2}) },

    "env!" => \$opt_env,
    "diff=s" => \$diff,
    "color!" => \$opt_color,
    "colormap|cm=s" => \@opt_colormap,
    "t|expand-tabs" => \$opt_t,
    "c|context" => sub { push(@diffopts, "-c") },
    "u|unified" => sub { push(@diffopts, "-u") },
    "C=i" => sub { push(@diffopts, "-C" . ($_[1] > 0 ? $_[1] : '')) },
    "U=i" => sub { push(@diffopts, "-U" . ($_[1] > 0 ? $_[1] : '')) },
    "cdif" => \$opt_cdif,
);

Getopt::Long::Configure("bundling");
GetOptions(@optargs) || usage();

my %colormap = (
    OCOMMAND => "CSE" ,
    NCOMMAND => "MSE" ,
    OFILE    => "CDE" ,
    NFILE    => "MDE" ,
    OMARK    => "CDw"  ,
    NMARK    => "MDw"  ,
    BMARK    => "w"   ,
    LINE     => "Y"   ,
    );

if (@opt_colormap) {
    map {
	my $c = pop @$_;
	map { $colormap{$_} = $c }
	map { match_glob $_, keys %colormap }
	@$_;
    }
    map { [ split /=/, $_, -1 ] }
    map { split /,/ }
    @opt_colormap;
}

$opt_f = 1 if $opt_F;
$diff ||= 'diff';

my($OLD, $NEW, $DIFF);
if (@ARGV == 2) {
    ($OLD, $NEW) = @ARGV;
    $DIFF = "$diff @diffopts $OLD $NEW |";
} elsif (@ARGV < 2) {
    $DIFF = shift || '-';
    $opt_s++;
} else {
    usage("Unexpected arguments.\n\n");
}
$readfile = ($OLD and $NEW) && !($opt_s || $opt_c || $opt_u);

sub usage {
    select STDERR;
    print @_;
    pod2usage(-verbose => 0, -exitval => "NOEXIT");
    print "$rcsid\n" if $rcsid =~ /:/;
    exit;
}

$screen_width = $opt_w || &terminal_width;
$column_width = max(1, int(($screen_width - 6) / 2));

if ($opt_d) {
    printf STDERR "\$OLD = %s\n", $OLD // "undef";
    printf STDERR "\$NEW = %s\n", $NEW // "undef";
    printf STDERR "\$DIFF = %s\n", $DIFF // "undef";
}

if ($readfile) {
    open(OLD, $OLD) || die "$OLD: $!\n";
    open(NEW, $NEW) || die "$NEW: $!\n";
}

if ($opt_cdif) {
    my $pid = open DIFF, '-|';
    if (not defined $pid) {
	die "$!" if not defined $pid;
    }
    ## child
    elsif ($pid == 0) {
	if ($DIFF ne '-') {
	    open(STDIN, $DIFF) || die "cannot open diff: $!\n";
	}
	do { exec qw"cdif --nocc --nomc" } ;
	warn "exec failed: $!";
	print while <>;
	exit;
    }
    ## parent
    else {
	## nothing to do
    }
} else {
    open(DIFF, $DIFF) || die "cannot open diff: $!\n";
}

my $oline = 1;
my $nline = 1;

use constant {
    DIFF_UNDEF => 0,
    DIFF_N => 1,
    DIFF_C => 2,
    DIFF_U => 3,
};
my $diff_mode = DIFF_UNDEF;

DIFF: while (<DIFF>) {
    my @old;
    my @new;
    my($left, $ctrl, $right);
    #
    # normal diff
    #
    if (($left, $ctrl, $right) = /^([\d,]+)([adc])([\d,]+)$/) {
	$diff_mode = DIFF_N;
	my($l1, $l2) = range($left);
	my($r1, $r2) = range($right);
	if ($readfile) {
	    my $identical_line = $l1 - $oline + 1 - ($ctrl ne 'a');
	    print_identical($identical_line);
	}
	print if $opt_d || $opt_s;
	if ($ctrl eq 'd' || $ctrl eq 'c') {
	    ($oline) = $left =~ /^(\d+)/;
	    my $n = $l2 - $l1 + 1;
	    @old = read_line(*DIFF, $n);
	    $readfile and read_line(*OLD, $n);
	}
	read_line(*DIFF, 1) if $ctrl eq 'c';
	if ($ctrl eq 'a' || $ctrl eq 'c') {
	    ($nline) = $right =~ /^(\d+)/;
	    my $n = $r2 - $r1 + 1;
	    @new = read_line(*DIFF, $n);
	    $readfile and read_line(*NEW, $n);
	}
	map { s/^..// } @old, @new;
	flush_buffer([], \@old, \@new);
    }
    #
    # context diff
    #
    elsif (/^\*\*\* /) {
	$diff_mode = DIFF_C;
	print_command($column_width, $_, scalar(<DIFF>), type => 'FILE');
    }
    elsif ($_ eq "***************\n") {
	$diff_mode = DIFF_C;
	my $ohead = $_ = <DIFF>;
	unless (($left) = /^\*\*\* ([\d,]+) \*\*\*\*$/) {
	    print;
	    next;
	}
	my $nhead = $_ = <DIFF>;
	unless (($right) = /^--- ([\d,]+) ----$/) {
	    @old = read_line(*DIFF, range($left) - 1, $nhead);
	    $nhead = $_ = <DIFF>;
	    unless (($right) = /^--- ([\d,]+) ----$/) {
		print $ohead, @old, $_;
		next;
	    }
	}
	if (@old == 0 or grep(/^\!/, @old)) {
	    @new = read_line(*DIFF, scalar(range($right)));
	}
	print_command($column_width, $ohead, $nhead);
	($oline) = $left =~ /^(\d+)/;
	($nline) = $right =~ /^(\d+)/;

	my @buf = merge_diffc(\@old, \@new);
	map { map { s/^..// } @$_ } @buf;
	flush_buffer(@buf);
    }
    #
    # unified diff
    #
    elsif (/^--- /) {
	$diff_mode = DIFF_U;
	my $next = <DIFF>;
	print_command($column_width, $_, $next, type => 'FILE');
    }
    elsif (/^\@\@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? \@\@/) {
	$diff_mode = DIFF_U;
	($oline, $nline) = ($1, $3);
	my($a, $b) = ($2//1, $4//1);
	print_command($column_width, $_, $_, type => 'COMMAND');

	my @buf = read_diffu(*DIFF, $a, $b);
	map { map { s/^.// } @$_ } @buf;
	flush_buffer(@buf);
    }
    else {
	print;
    }
}

close DIFF;
my $exit = $? >> 8;

if ($readfile) {
    if ($exit < 2) {
	print_identical(-1);
    }
    close OLD;
    close NEW;
}

exit($exit == 2);

######################################################################

my %slot;
BEGIN {
    %slot = (" " => 0, "\t" => 0, "-" => 1, "+" => 2);
}
sub read_diffu {
    my $FH = shift;
    my @l = (0, @_);

    my $i = 0;
    my @buf;
    my $slot;
    while (2 * $l[0] + $l[1] + $l[2] > 0) {
	$_ = <$FH>;
	while (($i % 3) != ($slot = $slot{substr($_, 0, 1)})) {
	    $i++;
	}
	$l[$slot]--;
	$buf[$i] //= [];
	push @{$buf[$i]}, $_;
    }
    map { $_ // [] } @buf;
}

sub merge_diffc {
    my @o = @{+shift};
    my @n = @{+shift};
    my @buf;

    die if grep { not /^[ \-\+\!] / } @o, @n;

    while (@o or @n) {
	my @slot = ([], [], []);
	push @buf, @slot;

	if (@o and @n) {
	    while (@o and @n and $o[0] =~ /^  / and $n[0] =~ /^  /) {
		push @{$slot[0]}, shift @o;
		shift @n;
	    }
	}
	elsif (@o) {
	    push @{$slot[0]}, shift @o while (@o and $o[0] =~ /^  /);
	}
	elsif (@n) {
	    push @{$slot[0]}, shift @n while (@n and $n[0] =~ /^  /);
	}
	    
	push @{$slot[1]}, shift @o while (@o and $o[0] =~ /^\- /);
	next if @{$slot[1]};

	push @{$slot[2]}, shift @n while (@n and $n[0] =~ /^\+ /);
	next if @{$slot[2]};

	push(@{$slot[1]}, shift @o) while (@o and $o[0] =~ /^! /);
	push(@{$slot[2]}, shift @n) while (@n and $n[0] =~ /^! /);
    }

    @buf;
}

sub flush_buffer {

    while (my($s, $o, $n) = splice(@_, 0, 3)) {
	$o //= [];
	$n //= [];

	for (@$s) {
	    print_column($column_width, $_, ' ', ' ', $_);
	    $oline++;
	    $nline++;
	}

	while (@$o or @$n) {
	    my $old = shift @$o;
	    my $new = shift @$n;
	    my $omark = $old ? '<' : ' ';
	    my $nmark = $new ? '>' : ' ';

	    print_column($column_width, $old, $omark, $nmark, $new);

	    $oline++ if defined $old;
	    $nline++ if defined $new;
	}
    }
}

sub print_identical {
    my $n = shift;
    while ($n--) {
	my $old = <OLD>;
	my $new = <NEW>;
	defined $old or defined $new or last;
	if ($opt_l) {
	    print linenum($oline) if $opt_n;
	    print expand_tab($old);
	} else {
	    print_column($column_width, $old, ' ', ' ', $new);
	}
	$oline++; $nline++;
    }
}

sub print_column {
    my($width, $old, $omark, $nmark, $new, $noline) = @_;
    my $print_number = ($opt_n and not $noline);

    if ($opt_1) {
	print $old if defined $old;
	return;
    }
    if ($opt_2) {
	print $new if defined $new;
	return;
    }

    my($onum, $nnum) = ('', '');
    if ($print_number) {
	$onum = ' ' x 5;
	$nnum = ' ' x 5;
	$width = max(1, $width - 5);
    }
    if (defined $old) {
	chomp $old;
	$old = expand_tab($old);
	$onum = linenum($oline) if $print_number;
    }
    if (defined $new) {
	chomp $new;
	$new = expand_tab($new);
	$nnum = linenum($nline) if $print_number;
    }
    my($o, $n);
    my($ocont, $ncont, $contmark) = (' ', ' ', '.');
    while (1) {
	($o, $old) = fold($old // "", $width, onword => $opt_F, pad => 1);
	($n, $new) = fold($new // "", $width, onword => $opt_F);

	print($onum,
	      $o,
	      color($omark =~ /\S/ ? 'OMARK' : 'BMARK', $omark),
	      color($nmark =~ /\S/ ? 'NMARK' : 'BMARK', $nmark),
	      $nnum,
	      $n,
	      "\n");

	last unless $opt_f;
	last unless $old ne '' or $new ne '';

	if ($print_number) {
	    $onum = $nnum = ' ' x 5;
	} else {
	    $ocont = $contmark if $old ne '';
	    $ncont = $contmark if $new ne '';
	}
    }
}

sub print_command {
    my($width, $old, $new) = splice(@_, 0, 3);
    my %opt = @_;

    chomp $old;
    chomp $new;
    my($o, $ox) = fold($old, $width, pad => 1);
    my($n, $nx) = fold($new, $width, pad => 1);

    my($ocolor, $ncolor) = qw(OCOMMAND NCOMMAND);
    if ($opt{type}) {
	$ocolor = "O" . $opt{type};
	$ncolor = "N" . $opt{type};
    }

    print color($ocolor, $o);
    print "  ";
    print color($ncolor, $n);
    print "\n";
}

my $wchars;
my $_a_zA_Z0_9;
my $reset_re;
my $color_re;
BEGIN {
    my $wide      = '\p{East_Asian_Width=Wide}';
    my $fullwidth = '\p{East_Asian_Width=FullWidth}';
    my $ambiguous = '\p{East_Asian_Width=Ambiguous}';
    $wchars = "${wide}${fullwidth}";
    $_a_zA_Z0_9 = "_a-zA-Z0-9";
    $reset_re = qr/\e\[[0;]*m/;
    $color_re = qr/\e\[[\d;]*m/;
}

sub fold {
    local $_ = shift;
    my $width = shift;
    my %opt = @_ ? @_ : {};

    $width < 1 and croak "width should be greater than 0";

    my $folded = '';
    my $room = $width;
    my @color_stack;
    while (length) {

	if (s/^($reset_re)//) {
	    $folded .= $1;
	    @color_stack = ();
	    next;
	}

	last if $room < 1;
	last if $room != $width and /^[$wchars]/o and $room < 2;

	if (s/^($color_re)//) {
	    $folded .= $1;
	    push @color_stack, $1;
	    next;
	}

	if (my $mb = s/^([$wchars]+)//o or s/^(\e*[^\e$wchars]+)//o) {
	    my $string = $1;
	    my $chars = $mb ? max(1, int($room/2)) : $room;
	    my $cut = substr($string, 0, $chars, "");
	    $folded .= $cut;
	    $room -= mbwidth($cut);
	    $_ = $string . $_ if length $string;
	} else {
	    die "panic ($_)";
	}
    }

    if ($opt{onword}
	and my($tail) = /^([$_a_zA_Z0_9]+)/o
	and $folded =~ m{
		^
		( (?: [^\e]* $color_re ) *+ )
		( .*? )
		( [$_a_zA_Z0_9]+ )
		$
	}xo
	) {
	## Break line before word only when enough space will be
	## provided for the word in the next call.
	my($s, $e) = ($-[3], $+[3]);
	my $l = $e - $s;
	if ($room + $l < $width and $l + length($tail) <= $width) {
	    $_ = substr($folded, $s, $l, '') . $_;
	    $room += $l;
	}
    }

    if (@color_stack) {
	$folded .= RESET;
	$_ = join '', @color_stack, $_;
    }

    $folded .= ' ' x $room if $opt{pad};

    ($folded, $_);
}

sub read_line {
    local *FH = shift;
    my $c = shift;
    my @buf = @_;
    while ($c--) {
	last if eof FH;
	push @buf, scalar <FH>;
    }
    wantarray ? @buf : join '', @buf;
}

sub range {
    local $_ = shift;
    my($from, $to) = /,/ ? split(/,/) : ($_, $_);
    wantarray ? ($from, $to) : $to - $from + 1;
}

my $nwidth;
my $nformat;
BEGIN {
    $nwidth = 4;
    $nformat = "%${nwidth}d ";
}
sub linenum {
    color("LINE", sprintf("%4d", @_)) . " ";
}

my @tabspace;
BEGIN {
    @tabspace = map { ' ' x (8 - $_) } 0..7;
}
sub expand_tab {
    local $_ = shift;
    1 while s/^([^\t]*)\t/$1 . $tabspace[&pwidth($1) % 8]/e;
    $_;
}

sub pwidth {
    local $_ = shift;
    if (/[\010\e\f\r]/) {
	s/$color_re//g;
	s/^.*[\f\r]//;
	1 while s/[^\010]\010//;
	s/^\010+//;
    }
    /[$wchars]/o ? mbwidth($_) : length($_);
}

sub mbwidth {
    my $arg = shift;
    my $len = length $arg;
    while ($arg =~ m/([$wchars]+)/go) {
	$len += length $1;
    }
    $len;
}

sub terminal_width {
    my $width = 80;
    if (-t STDERR) {
	my $stty = `stty -f /dev/stderr all`; # XXX too easy...
	if ($stty =~ /(\d+) +columns/) {
	    $width = $1;
	}
    }
    $width;
}

sub unesc {
    local $_ = shift;
    s/\e/\\e/g;
    $_;
}

sub colorseq {
    my $colormode = shift;

    my($start, $end) = ('', '');
    if ($colormode =~ /,/) {
	($start, $end) = split(/,/, $colormode, 2);
    } else {
	map {
	    $start .= UNDERLINE if /U/;
	    $start .= REVERSE   if /S/;
	    $start .= BOLD      if /D/;
	    $start .= BLINK     if /F/;
	    $start .= RED       if /R/; $start .= ON_RED       if /r/;
	    $start .= GREEN     if /G/; $start .= ON_GREEN     if /g/;
	    $start .= BLUE      if /B/; $start .= ON_BLUE      if /b/;
	    $start .= CYAN      if /C/; $start .= ON_CYAN      if /c/;
	    $start .= MAGENTA   if /M/; $start .= ON_MAGENTA   if /m/;
	    $start .= YELLOW    if /Y/; $start .= ON_YELLOW    if /y/;
	    $start .= BLACK     if /K/; $start .= ON_BLACK     if /k/;
	    $start .= WHITE     if /W/; $start .= ON_WHITE     if /w/;
	} $colormode if $colormode;
	$end = RESET if $start;
	$start =~ s/m\e\[/;/g;
    }
    ($start, $end);
}

my %colorcache;

sub color {
    my($color, $text) = @_;
    return $text unless $color;
    unless ($colorcache{$color}) {
	my $mode = exists $colormap{$color} ? $colormap{$color} : $color;
	$colorcache{$color} = [ colorseq($mode) ];
    }
    my($s, $e) = @{$colorcache{$color}};
    if ($s ne "") {
	$text =~ s/(^|$reset_re)([^\e\r\n]+)/$1$s$2$e/mg;
    }
    $text;
}

__END__

=pod

=head1 DESCRIPTION

Sdif is a clone of System V sdiff(1) command.  The basic feature of
sdif and sdiff is making a side-by-side listing of two different
files.  It makes much easier to compare two files than looking at the
normal diff output.  All contents of two files a listed on left and
right sides.  Center column is used to indicate how different the
line.  No mark means there is no difference.  The line only included
in left file is indicated by `<' mark, and `>' is used to lines only
in right file.  Modified line has a mark `|'.  Example output from
sdif is like this:

     1    deleted       <
     2    same             1    same
     3    changed       |  2    modified
     4    same             3    same
                        >  4    added


Sdif has some incompatibilities with original sdiff.  Negative
incompatibility is a lack of -o option and expanding all tabs to
spaces.  Other incompatibilities are:

     o line numbering
     o folding a long line
     o context diff support
     o unified diff support
     o option to keep diff mark
     o handle backspace and carriage return
     o default width is 80
     o cdif (word context diff) support
     o read diff data from file or stdin


=head1 OPTIONS

=over 7

=item -w width

Use width as a width of output listing.  Default width is 80.
Original sdiff has a default value 130 but nobody uses 132 column line
printer in these days.  If the standard error is to a terminal, the
width of that terminal is taken as a output width if possible.

=item -l

Print only left column if the line is identical.

=item -s

Silent.  No output for identical lines.  Reading diff output from file
or stdin put this switch on automatically.

=item -n

Print line number on each lines.

=item -f

Fold the line if it is longer than printing width.  Folded line is
indicated by `+' mark at top of the line.  No continue mark is printed
when numbering option is on.

=item -F
Fold longs line at word boundaries.

=item -cdif

Use cdif command instead of normal diff command.

=item -b, -w, -c, -u, -B

Passed through to the back-end diff command.  Sdif can process the
output from context diff (-c) and unified diff (-u) if those are
available.  These are sometimes useful because you can get only
modified part of text.  Option -B is valid only for cdif.

If you want to pass a option not listed here, please use
-diff="cdif ..." option.

=item -diff=command

Any command can be specified as a diff command to be used.  However
piping output to sdif is usually easier unless you want to get whole
text.

=item -1, -2

Only old file is printed when option -1 is supplied and only new file
with -2 option.  These are almost useless with normal diff because
``sdif -1 A B'' is equivalent to ``cat A'', but probably make some
sense with -cdif option.

=back

=head1 AUTHOR

Kazumasa Utashiro

https://github.com/kaz-utashiro/

=head1 SEE ALSO

perl(1),
diff(1),
cdif(1)

=cut
